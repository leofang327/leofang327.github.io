<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方孝君 | Leo&#39;s Personal Website</title>
    <link>http://leofang.cn/author/%E6%96%B9%E5%AD%9D%E5%90%9B/</link>
      <atom:link href="http://leofang.cn/author/%E6%96%B9%E5%AD%9D%E5%90%9B/index.xml" rel="self" type="application/rss+xml" />
    <description>方孝君</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2021 leofang</copyright><lastBuildDate>Wed, 24 Mar 2021 08:18:13 +0800</lastBuildDate>
    <image>
      <url>http://leofang.cn/author/%E6%96%B9%E5%AD%9D%E5%90%9B/avatar_hu433b6f6e2665e26af2ceb5633810814f_34630_270x270_fill_q90_lanczos_center.jpg</url>
      <title>方孝君</title>
      <link>http://leofang.cn/author/%E6%96%B9%E5%AD%9D%E5%90%9B/</link>
    </image>
    
    <item>
      <title>利用 Docker 完成项目的 CI/CD</title>
      <link>http://leofang.cn/post/docker-ci/</link>
      <pubDate>Wed, 24 Mar 2021 08:18:13 +0800</pubDate>
      <guid>http://leofang.cn/post/docker-ci/</guid>
      <description>&lt;p&gt;本文以 &lt;code&gt;Gitlab&lt;/code&gt; 平台和一个基于 Java 的微服务后端项目为例，介绍了如何利用 &lt;code&gt;Docker&lt;/code&gt; 实现项目的CI/CD。&lt;/p&gt;
&lt;h1 id=&#34;preliminary&#34;&gt;Preliminary&lt;/h1&gt;
&lt;h2 id=&#34;cicd&#34;&gt;CI/CD&lt;/h2&gt;
&lt;p&gt;CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是&lt;strong&gt;持续集成&lt;/strong&gt;、&lt;strong&gt;持续交付&lt;/strong&gt;和&lt;strong&gt;持续部署&lt;/strong&gt;。作为一个面向开发和运营团队的解决方案，CI/CD 主要针对在集成新代码时所引发的问题。&lt;/p&gt;
&lt;p&gt;具体而言，CI/CD 可让持续自动化和持续监控贯穿于应用的整个生命周期（从集成和测试阶段，到交付和部署）。这些关联的事务通常被统称为&lt;strong&gt;CI/CD管道&lt;/strong&gt;，由开发和运维团队以敏捷方式协同支持。&lt;/p&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。&lt;/p&gt;
&lt;p&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;
&lt;p&gt;容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;docker-compose&lt;/h2&gt;
&lt;p&gt;微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，那么效率之低，维护量之大可想而知。&lt;/p&gt;
&lt;p&gt;使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具&lt;/p&gt;
&lt;h2 id=&#34;containerimage&#34;&gt;container/image&lt;/h2&gt;
&lt;p&gt;docker 的镜像概念类似虚拟机的镜像。是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。&lt;/p&gt;
&lt;p&gt;docker 利用容器来运行应用：docker容器是由docker镜像创建的运行实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1.jpeg&#34; alt=&#34;容器与镜像&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gitlab-ciymldockerfilegitlab-runner&#34;&gt;.gitlab-ci.yml、Dockerfile、gitlab-runner&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.gitlab-ci.yml&lt;/strong&gt;：定义 &lt;code&gt;pipeline&lt;/code&gt; 阶段分级与每个阶段具体逻辑的文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;：用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gitlab-runner&lt;/strong&gt;：GitLab-Runner就是一个用来执行软件集成脚本的东西。你可以想象一下：Runner就像一个个的工人，而GitLab-CI就是这些工人的一个管理中心，所有工人都要在GitLab-CI里面登记注册，并且表明自己是为哪个工程服务的。当相应的工程发生变化时，GitLab-CI就会通知相应的工人执行软件集成脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./2.png&#34; alt=&#34;gitlab-ci&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;domains&#34;&gt;Domains&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CI机&lt;/strong&gt;：需要安装 &lt;code&gt;docker&lt;/code&gt; 和 &lt;code&gt;gitlab-runner&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务机&lt;/strong&gt;：需要安装 &lt;code&gt;git&lt;/code&gt; 、 &lt;code&gt;docker&lt;/code&gt; 和 &lt;code&gt;docker-compose&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gitlab&lt;/strong&gt;：用于在云端存储项目，并且需要在项目中设置 &lt;code&gt;环境变量&lt;/code&gt; 与 &lt;code&gt;gitlab-runner&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿里云容器镜像服务&lt;/strong&gt;：需要使用云商提供的容器镜像服务来构建 &lt;code&gt;远程镜像仓库&lt;/code&gt;，本文以阿里云为例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;
&lt;h2 id=&#34;1-准备工作&#34;&gt;1. 准备工作&lt;/h2&gt;
&lt;h3 id=&#34;11-ci机&#34;&gt;1.1 CI机&lt;/h3&gt;
&lt;p&gt;你需要购买云商提供的ECS服务，CI机的配置要求并不高，一般来说 &lt;code&gt;2核/4GB/20Mbps&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&#34;12-服务机&#34;&gt;1.2 服务机&lt;/h3&gt;
&lt;p&gt;你需要购买云商提供的ECS服务，建议服务机的配置设高一点，我这里是 &lt;code&gt;4核/16GB/20Mbps&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;13-阿里云容器镜像服务&#34;&gt;1.3 阿里云容器镜像服务&lt;/h3&gt;
&lt;p&gt;假设你已经注册过阿里云的账户并登陆，现在需要开通该账号下的容器镜像服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在阿里云官网中依次选择 &lt;code&gt;产品&lt;/code&gt; -&amp;gt; &lt;code&gt;弹性计算&lt;/code&gt; -&amp;gt; &lt;code&gt;容器镜像服务ACR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./3.png&#34; alt=&#34;aliyun1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击 &lt;code&gt;管理控制台&lt;/code&gt;，并选择镜像仓库的主机地址，本文选择&lt;code&gt;华东2（上海）&lt;/code&gt;，进入个人版实例：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./4.png&#34; alt=&#34;aliyun2&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./5.png&#34; alt=&#34;aliyun3&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在该命名空间下创建一个镜像仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择地域、命名空间，输入仓库名称、摘要和描述信息，仓库类型选择&lt;code&gt;私有&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./6.png&#34; alt=&#34;aliyun4&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码源选择&lt;code&gt;本地仓库&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./7.png&#34; alt=&#34;aliyun5&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-ci机操作&#34;&gt;2. CI机操作&lt;/h2&gt;
&lt;h3 id=&#34;21-连接ci机&#34;&gt;2.1 连接CI机&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh root@xxx.xxx.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-安装docker并使其能自启动&#34;&gt;2.2 安装docker并使其能自启动&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
systemctl enable docker
systemctl start docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;23-配置ssh-key密钥对与服务机通信&#34;&gt;2.3 配置SSH key密钥对与服务机通信&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;
ssh-add ~/.ssh/id_rsa
ssh-copy-id -i ~/.ssh/id_rsa.pub root@服务机IP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;注：这里配置 SSH key，是因为 CI/CD 的 &lt;code&gt;deploy&lt;/code&gt; 阶段通常需要CI机的gitlab-runner通过ssh连接来执行服务机的命令。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-安装gitlab-runner并运行&#34;&gt;2.4 安装gitlab-runner并运行：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name gitlab-runner --restart always \
-v /srv/gitlab-runner/config:/etc/gitlab-runner \
-v /var/run/docker.sock:/var/run/docker.sock \
-v /root/.ssh:/root/.ssh \
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们来看下，在这个命令里面挂载了三个东西:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第一个是gitlab-runner的配置文件&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第二个是为了让runner里面可以执行宿主机的docker&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 第三个是为了让CI机能够免密访问服务机&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-将-runner-注册到-gitlab-中&#34;&gt;2.5 将 runner 注册到 Gitlab 中&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it gitlab-runner gitlab-ci-multi-runner register
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来你会进入一个命令行交互界面：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;Runtime platform                                    arch=amd64 os=linux pid=19 revision=a998cacd version=13.2.2
Running in system-mode.

Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
https://code.kfcoding.com/
Please enter the gitlab-ci token for this runner:
bT*********ZcmD
Please enter the gitlab-ci description for this runner:
[b5f641f7df47]: shuishan-data-runner
Please enter the gitlab-ci tags for this runner (comma separated):
shuishan-data-runner
Registering runner... succeeded                     runner=bTYwz7Zf
Please enter the executor: custom, docker, parallels, ssh, docker-ssh, shell, virtualbox, docker+machine, docker-ssh+machine, kubernetes:
docker
Please enter the default Docker image (e.g. ruby:2.6):
ccchieh/centos-common
Runner registered successfully. Feel free to start it, but if it&#39;s running already the config should be automatically reloaded!
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;第一步：输入 Gitlab URL，比如 &lt;code&gt;https://code.kfcoding.com/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二步：输入 gitlab-ci token，这里就需要进入自己的gitlab仓库中的CI/CD设置里面，复制下自己仓库runner的token：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;注：这里所复制token的所在 group/project 决定了该 runner 的可用范围&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./8.png&#34; alt=&#34;gitlab-runner&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三步：输入 runner 的 description、tags，其中 tags 会在后续 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 中用到&lt;/li&gt;
&lt;li&gt;第四步：选择 runner 的执行器，这里我们选择 docker&lt;/li&gt;
&lt;li&gt;第五步：选择默认的 docker 镜像，这里我用的是个人制作的基于centos的镜像，只是在官方的centos镜像基础上安装了openssh、git、nano，如果有其他需要的话也可以自己制作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;26-编辑-gitlab-runner-的配置文件&#34;&gt;2.6 编辑 gitlab-runner 的配置文件&lt;/h3&gt;
&lt;p&gt;因为我们把配置文件挂载到宿主机了，所以我们只需要编辑宿主机的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim /srv/gitlab-runner/config/config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里贴出我的配置做参考：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;concurrent = 10
[[runners]]
  name = &amp;quot;s****an&amp;quot;
  url = &amp;quot;https://co*******m/&amp;quot;
  token = &amp;quot;m********JFMHxD&amp;quot;
  executor = &amp;quot;docker&amp;quot;
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
  [runners.docker]
    tls_verify = false
    image = &amp;quot;ccchieh/centos-common&amp;quot;
    privileged = false
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = [&amp;quot;/cache&amp;quot;, &amp;quot;/var/run/docker.sock:/var/run/docker.sock&amp;quot;, &amp;quot;/usr/bin/docker:/usr/bin/docker&amp;quot;, &amp;quot;/data/.m2:/root/.m2&amp;quot;, &amp;quot;/root/.ssh:/root/.ssh&amp;quot;, &amp;quot;/root/.docker/:/root/.docker/&amp;quot;]
    pull_policy = &amp;quot;if-not-present&amp;quot;
    shm_size = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里修改的主要是&lt;code&gt;concurrent&lt;/code&gt;、&lt;code&gt;volumes&lt;/code&gt;、&lt;code&gt;pull_policy&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concurrent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表示这个runner可以并行执行多少任务，比较常见的就是同时提交多次任务时runner可以并行执行，或者在一次管道作业中同一个stage的任务可以并行完成，比如在图中的Build阶段，同时打包了4个子模块，在四个子模块中都会先下载依赖，这时如果最大并发数设置为默认1的时候会把花费很多时间，如果并发数大于4，那么Build阶段就可以并发完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./9.png&#34; alt=&#34;pipeline&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挂载的目录，就是docker run 的时候用的 -v 挂载的目录，因为我们后面需要编译Dockerfile，所以将docker的相关目录文件挂载上去，然后挂载下maven仓库（这里是直接挂载了，实际使用的时候也可以利用gitlab-ci文件里面的cache进行缓存）避免每次打包编译java项目的时候都要下载一次依赖（这里是针对maven的，其他依赖管理软件视情况而定）。最后我这里直接把宿主机的.ssh也挂载上去了，是为了后面可以操作远程部署的服务器，因为我这里都是内网机器，所以安全性暂时不考虑，这里再实际应用中请注意下，避免不必要的风险。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pull_policy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表示只有当本地没镜像的时候才拉取镜像，避免每次都重新拉取镜像。&lt;/p&gt;
&lt;h2 id=&#34;3-项目文件编写与gitlab设置&#34;&gt;3. 项目文件编写与Gitlab设置&lt;/h2&gt;
&lt;h3 id=&#34;31-设置项目的-gitlab-runner&#34;&gt;3.1 设置项目的 gitlab-runner&lt;/h3&gt;
&lt;p&gt;这一步其实在2.5注册gitlab-runner输入token时已经完成了，点击项目的 &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;CI/CD&lt;/code&gt; -&amp;gt; &lt;code&gt;Runners&lt;/code&gt;，确认之前注册的runner是&lt;code&gt;avaiable&lt;/code&gt;的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./10.png&#34; alt=&#34;runner&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-编写-dockerfile&#34;&gt;3.2 编写 Dockerfile&lt;/h3&gt;
&lt;p&gt;对于每个项目我们都需要编写一个Dockerfile用于实现对项目的编译打包，这里我们以Java微服务后端的项目为例简单介绍下，Dockerfile文件如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# 构建一个基本的微服务打包环境,将公用模块install
FROM ccchieh/maven3-openjdk-8-cn as prod
ARG MY_HOME=/usr/src/app
COPY . $MY_HOME
WORKDIR $MY_HOME
ENV TIME_ZONE=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TIME_ZONE /etc/localtime &amp;amp;&amp;amp; echo $TIME_ZONE &amp;gt; /etc/timezone
RUN /usr/local/bin/mvn-entrypoint.sh mvn clean install
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-设置项目的环境变量&#34;&gt;3.3 设置项目的环境变量&lt;/h3&gt;
&lt;p&gt;在.gitlab-ci.yml中是支持变量的，这样我们可以把如主机ip等敏感信息设置为变量，防止信息泄露。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./11.png&#34; alt=&#34;variables&#34;&gt;&lt;/p&gt;
&lt;p&gt;以我这里为例分别设置了容器名称、镜像私有仓库地址、部署服务器地址（如root@202.1.1.1）、服务器中的docker-compose的文件路径。&lt;/p&gt;
&lt;p&gt;其中镜像私有仓库地址的前缀需要前往&lt;code&gt;步骤1.3&lt;/code&gt;中新建的镜像仓库来获取：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./12.png&#34; alt=&#34;image-gang&#34;&gt;&lt;/p&gt;
&lt;p&gt;后缀是具体镜像的名称以及镜像版本号，版本号可以以不同分支的镜像来区分，比如 &lt;code&gt;master/prod&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;34-编写-gitlab-ciyml&#34;&gt;3.4 编写 .gitlab-ci.yml&lt;/h3&gt;
&lt;p&gt;.gitlab-ci.yml文件定义了CI/CD pipeline的阶段与具体逻辑，这里我们分为四个阶段（pre-build、build、deploy、cleanup）来打包构建项目的镜像：&lt;/p&gt;
&lt;p&gt;这里就用到了步骤3.3中设置的环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;stages:
  - pre-build
  - build
  - deploy
  - cleanup


build-base: # 预编译阶段
  stage: pre-build
  only:
    - master
  tags:
    - shuishan-data-runner
  script:
    # 先把基础目录编译成镜像
    - |
      docker build -t $IMAGE_BASE_MASTER .
      docker push $IMAGE_BASE_MASTER

build-gateway: # 编译阶段
  stage: build
  only:
    - master
  tags:
    - shuishan-data-runner
  script:
    # 打包gateway-zuul
    - |
      docker build --build-arg MODULE_NAME=$CONT_GATEWAY_NAME --build-arg PROFILE_NAME=dockerdev -t $IMAGE_GATEWAY_MASTER -f ./$CONT_GATEWAY_NAME/Dockerfile ./$CONT_GATEWAY_NAME
      docker push $IMAGE_GATEWAY_MASTER

build-usercenter: # 编译阶段
  stage: build
  only:
    - master
  tags:
    - shuishan-data-runner
  script:
    # 打包user-center
    - |
      docker build --build-arg MODULE_NAME=$CONT_USERCENTER_NAME --build-arg PROFILE_NAME=dockerdev -t $IMAGE_USERCENTER_MASTER -f ./bx-core-server/$CONT_USERCENTER_NAME/Dockerfile ./bx-core-server/$CONT_USERCENTER_NAME
      docker push $IMAGE_USERCENTER_MASTER


deploy: # 部署阶段
  stage: deploy
  only:
    - master
  tags:
    - shuishan-data-runner
  script:
    - |
      ssh $TEST_SERVER_ADDR docker-compose -f ${TEST_SERVER_PATH}/docker-compose.yml stop
      ssh $TEST_SERVER_ADDR docker-compose -f ${TEST_SERVER_PATH}/docker-compose.yml rm -sf $CONT_GATEWAY_NAME $CONT_USERCENTER_NAME
      ssh $TEST_SERVER_ADDR docker rmi $IMAGE_GATEWAY_MASTER $IMAGE_USERCENTER_MASTER
      ssh $TEST_SERVER_ADDR docker-compose -f ${TEST_SERVER_PATH}/docker-compose.yml up -d --build


cleanup: # 清理作业
  stage: cleanup
  only:
    - master
    - prod
  tags:
    - shuishan-data-runner
  script:
    - echo &amp;quot;回收垃圾&amp;quot;
  #    - docker system prune -f
  #  删除docker中间无用镜像，但是在并行的时候这么做会导致正在build的镜像失去中间层，使得build失败，所以推荐定期执行而不是在这里执行
  when: always
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-服务机操作&#34;&gt;4. 服务机操作&lt;/h2&gt;
&lt;h3 id=&#34;41-连接服务机&#34;&gt;4.1 连接服务机&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh root@xxx.xxx.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-安装-docker-并使其能自启动&#34;&gt;4.2 安装 docker 并使其能自启动&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
systemctl enable docker
systemctl start docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;43-安装-docker-compose&#34;&gt;4.3 安装 docker-compose&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo curl -x socks5://dev.zzj.cool:10808 -L &amp;quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里因为github的连接问题，我用了一个自建的socket代理服务：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-x socks5://dev.zzj.cool:10808&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;44-安装-git&#34;&gt;4.4 安装 Git&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;45-编写-docker-composeyml&#34;&gt;4.5 编写 docker-compose.yml&lt;/h3&gt;
&lt;p&gt;Docker Compose默认的模板文件是&lt;code&gt;docker-compose.yml&lt;/code&gt;，我们可以通过编在服务机上编写&lt;code&gt;docker-compose.yml&lt;/code&gt;文件，将繁琐的docker命令整合成一个文件，最后通过一行命令来统一执行。&lt;/p&gt;
&lt;p&gt;以我们的&lt;code&gt;docker-compose.yml&lt;/code&gt;文件为例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &amp;quot;3&amp;quot;
services:
  nacos:
    container_name: nacos-standalone
    image: nacos/nacos-server:latest
    environment:
    - PREFER_HOST_MODE=hostname
    - MODE=standalone
    restart: always
    volumes:
    - ./nacos/standalone-logs/:/home/nacos/logs
    - ./nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    ports:
    - &amp;quot;8848:8848&amp;quot;
    networks:
      default:
        aliases:
         - nacos
  redis:
    container_name: metasequoia-redis
    restart: always
    image: &amp;quot;redis:alpine&amp;quot;
    networks:
      default:
        aliases:
         - redis
# 后端 
  bx-gateway-zuul:
    container_name: bx-gateway-zuul
    image: registry.cn-shanghai.aliyuncs.com/shuishan-data/shuishan-gateway-server:master
    restart: always
    volumes:
    - ./bx-gateway-zuul-logs/:/logs/
    ports:
    - &amp;quot;8080:8080&amp;quot;
    networks:
      default:
        aliases:
         - api # 设置api服务的别名
    environment:
    - NACOS_ADDR=nacos
    - NACOS_PORT=8848
  user-center:
    container_name: user-center
    image: registry.cn-shanghai.aliyuncs.com/shuishan-data/shuishan-usercenter-server:master
    restart: always
    volumes:
    - ./user-center-logs/:/logs/
    environment:
    - NACOS_ADDR=nacos
    - NACOS_PORT=8848
    networks:
      default:
        aliases:
         - usercenter
  shuishan-datav-server:
    container_name: shuishan-datav-server
    image: registry.cn-shanghai.aliyuncs.com/shuishan-data/shuishan-datav-server:master
    restart: always
    volumes:
    - ./shuishan-datav-server-logs/:/logs/
    - ./data/:/root/data/
    environment:
    - NACOS_ADDR=nacos
    - NACOS_PORT=8848
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我们需要打包构建的服务镜像包括：nacos服务发现镜像、redis服务镜像、网关服务镜像、用户鉴权服务镜像、子服务镜像(shuishan-datav-server)。&lt;/p&gt;
&lt;p&gt;其中image的前缀获取方式与&lt;code&gt;步骤3.3&lt;/code&gt;相同&lt;/p&gt;
&lt;h3 id=&#34;46-构建项目的容器镜像&#34;&gt;4.6 构建项目的容器镜像&lt;/h3&gt;
&lt;p&gt;进入到包含&lt;code&gt;docker-compose.yml&lt;/code&gt;的目录后：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f ./docker-compose.yml up -d --build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该命令可以自动完成包括构建镜像，(重新)创建服务，启动服务，并关联服务相关容器的一系列操作。&lt;/p&gt;
&lt;p&gt;至此，我们已经实现了项目的CI/CD，可以通过向项目push代码触发pipeline来测试整个流程。&lt;/p&gt;
&lt;h1 id=&#34;appendix&#34;&gt;Appendix:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查看宿主机下所有容器：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;停止所有容器：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop $(docker ps -aq)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;清除所有容器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rm $(docker ps -aq)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Writing Technical Content in Academic</title>
      <link>http://leofang.cn/post/writing-technical-content/</link>
      <pubDate>Sun, 07 Jun 2020 16:43:13 +0800</pubDate>
      <guid>http://leofang.cn/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\\\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\&lt;br&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;
&lt;p&gt;Academic supports a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal  
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python  
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>http://leofang.cn/post/jupyter/</link>
      <pubDate>Sun, 07 Jun 2020 16:33:21 +0800</pubDate>
      <guid>http://leofang.cn/post/jupyter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;
&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;
&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;
&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (
&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the metadata of your post, using the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;
&lt;p&gt;To set a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;
&lt;p&gt;For other tips, such as using math, see the guide on 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>http://leofang.cn/project/internal-project/</link>
      <pubDate>Mon, 01 Jun 2020 17:05:58 +0800</pubDate>
      <guid>http://leofang.cn/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>http://leofang.cn/project/external-project/</link>
      <pubDate>Sat, 30 May 2020 17:14:49 +0800</pubDate>
      <guid>http://leofang.cn/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>十大经典排序算法整理汇总</title>
      <link>http://leofang.cn/post/sort-algorithm/</link>
      <pubDate>Fri, 29 May 2020 20:46:57 +0800</pubDate>
      <guid>http://leofang.cn/post/sort-algorithm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文并不会详细讲解每种排序算法的原理&lt;/strong&gt;，网上有很多很好的教程，大家可以自己去搜了看。&lt;/p&gt;
&lt;p&gt;最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 
&lt;a href=&#34;https://leetcode-cn.com/problems/sort-an-array/&#34; title=&#34;LeetCode 912. 排序数组&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeetCode 912. 排序数组&lt;/a&gt; 这道题。&lt;/p&gt;
&lt;h2 id=&#34;性质汇总&#34;&gt;性质汇总&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果发现表中有错误，请留言告知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;最好&lt;/th&gt;
&lt;th&gt;最坏&lt;/th&gt;
&lt;th&gt;平均&lt;/th&gt;
&lt;th&gt;空间&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;稳定性&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否基于比较&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;冒泡排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;选择排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(\log n)$~$O(n)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;希尔排序&lt;/td&gt;
&lt;td&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$~$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计数排序&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基数排序&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;桶排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n+m)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;维基百科&#34;&gt;维基百科&lt;/h3&gt;
&lt;p&gt;我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bubble_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bubble_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Selection_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selection_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Insertion_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Insertion_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quicksort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;归并排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Merge_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希尔排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Shellsort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shellsort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计数排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Counting_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Counting_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基数排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Radix_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;桶排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bucket_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bucket_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Heapsort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heapsort&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;代码实现&lt;/h2&gt;
&lt;p&gt;所有的排序算法接口都是相同的，也就是 &lt;code&gt;vector&amp;lt;int&amp;gt; xxxSort(vector&amp;lt;int&amp;gt;&amp;amp; nums)&lt;/code&gt; 。只需要你传入一个 &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt; 类型的数组，就能返回排序后的结果。&lt;/p&gt;
&lt;p&gt;运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; sortArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        return quickSort(nums);
    }

    // 冒泡排序（超时）
    vector&amp;lt;int&amp;gt; bubbleSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = n-2; j &amp;gt;= i; --j) {
                if (nums[j] &amp;gt; nums[j+1]) {
                    swap(nums[j], nums[j+1]);
                }
            }
        }
        return nums;
    }

    // 选择排序（超时）
    vector&amp;lt;int&amp;gt; selectSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            int idx = i;
            for (int j = i; j &amp;lt; n; ++j) {
                if (nums[j] &amp;lt; nums[idx]) {
                    idx = j;
                }
            }
            swap(nums[i], nums[idx]);
        }
        return nums;
    }

    // 插入排序（超时）
    vector&amp;lt;int&amp;gt; insertSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = i; j &amp;gt; 0 &amp;amp;&amp;amp; nums[j] &amp;lt; nums[j-1]; --j) {
                swap(nums[j], nums[j-1]);
            }
        }
        return nums;
    }

    // 快速排序（24 ms）
    void qSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int l, int r) {
        if (l &amp;gt;= r) return;
        int m = l;
        for (int i = l; i &amp;lt; r; ++i) {
            if (nums[i] &amp;lt; nums[r]) {
                swap(nums[m++], nums[i]);
            }
        }
        swap(nums[m], nums[r]);
        qSort(nums, l, m-1);
        qSort(nums, m+1, r);
    }

    vector&amp;lt;int&amp;gt; quickSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        qSort(nums, 0, n-1);
        return nums;
    }

    // 归并排序（192 ms）
    vector&amp;lt;int&amp;gt; mSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int l, int r) {
        if (l &amp;gt;= r) return {nums[l]};
        int m = l+(r-l)/2;
        vector&amp;lt;int&amp;gt; lnums = mSort(nums, l, m);
        vector&amp;lt;int&amp;gt; rnums = mSort(nums, m+1, r);
        vector&amp;lt;int&amp;gt; res;
        int i = 0, j = 0;
        while (i &amp;lt;= m-l &amp;amp;&amp;amp; j &amp;lt;= r-m-1) {
            if (lnums[i] &amp;lt; rnums[j]) {
                res.push_back(lnums[i++]);
            } else {
                res.push_back(rnums[j++]);
            }
        }
        while (i &amp;lt;= m-l) {
            res.push_back(lnums[i++]);
        }
        while (j &amp;lt;= r-m-1) {
            res.push_back(rnums[j++]);
        }
        return res;
    }

    vector&amp;lt;int&amp;gt; mergeSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        nums = mSort(nums, 0, n-1);
        return nums;
    }

    // 归并排序 + 非递归（80 ms）
    vector&amp;lt;int&amp;gt; mergeSortNR(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int len = 1; len &amp;lt; n; len &amp;lt;&amp;lt;= 1) {
            for (int l = 0; l &amp;lt; n-len; l += 2*len) {
                int m = l+len-1;
                int r = min(n-1, l+2*len-1);
                vector&amp;lt;int&amp;gt; res;
                int i = l, j = m+1;
                while (i &amp;lt;= m &amp;amp;&amp;amp; j &amp;lt;= r) {
                    if (nums[i] &amp;lt; nums[j]) {
                        res.push_back(nums[i++]);
                    } else {
                        res.push_back(nums[j++]);
                    }
                }
                while (i &amp;lt;= m) {
                    res.push_back(nums[i++]);
                }
                while (j &amp;lt;= r) {
                    res.push_back(nums[j++]);
                }
                for (int i = l; i &amp;lt;= r; ++i) {
                    nums[i] = res[i-l];
                }
            }
        }
        return nums;
    }

    // 希尔排序（40 ms）
    vector&amp;lt;int&amp;gt; shellSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int gap = n/2; gap &amp;gt; 0; gap /= 2) {
            for (int i = gap; i &amp;lt; n; ++i) {
                for (int j = i; j-gap &amp;gt;= 0 &amp;amp;&amp;amp; nums[j-gap] &amp;gt; nums[j]; j -= gap) {
                    swap(nums[j-gap], nums[j]);
                }
            }
        }
        return nums;
    }

    // 计数排序（32 ms）
    vector&amp;lt;int&amp;gt; countSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (!n) return {};
        int minv = *min_element(nums.begin(), nums.end());
        int maxv = *max_element(nums.begin(), nums.end());
        int m = maxv-minv+1;
        vector&amp;lt;int&amp;gt; count(m, 0);
        for (int i = 0; i &amp;lt; n; ++i) {
            count[nums[i]-minv]++;
        }
        vector&amp;lt;int&amp;gt; res;
        for (int i = 0; i &amp;lt; m; ++i) {
            for (int j = 0; j &amp;lt; count[i]; ++j) {
                res.push_back(i+minv);
            }
        }
        return res;
    }

    // 基数排序（不适用于负数）
    vector&amp;lt;int&amp;gt; radixSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        int maxv = *max_element(nums.begin(), nums.end());
        int maxd = 0;
        while (maxv &amp;gt; 0) {
            maxv /= 10;
            maxd++;
        }
        vector&amp;lt;int&amp;gt; count(10, 0), rank(n, 0);
        int base = 1;
        while (maxd &amp;gt; 0) {
            count.assign(10, 0);
            for (int i = 0; i &amp;lt; n; ++i) {
                count[(nums[i]/base)%10]++;
            }
            for (int i = 1; i &amp;lt; 10; ++i) {
                count[i] += count[i-1];
            }
            for (int i = n-1; i &amp;gt;= 0; --i) {
                rank[--count[(nums[i]/base)%10]] = nums[i];
            }
            for (int i = 0; i &amp;lt; n; ++i) {
                nums[i] = rank[i];
            }
            maxd--;
            base *= 10;
        }
        return nums;
    }

    // 桶排序 (20 ms)
    vector&amp;lt;int&amp;gt; bucketSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        int maxv = *max_element(nums.begin(), nums.end());
        int minv = *min_element(nums.begin(), nums.end());
        int bs = 1000;
        int m = (maxv-minv)/bs+1;
        vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; bucket(m);
        for (int i = 0; i &amp;lt; n; ++i) {
            bucket[(nums[i]-minv)/bs].push_back(nums[i]);
        }
        int idx = 0;
        for (int i = 0; i &amp;lt; m; ++i) {
            int sz = bucket[i].size();
            bucket[i] = quickSort(bucket[i]);
            for (int j = 0; j &amp;lt; sz; ++j) {
                nums[idx++] = bucket[i][j];
            }
        }
        return nums;
    }

    // 堆排序（32 ms）
    void adjust(vector&amp;lt;int&amp;gt;&amp;amp; nums, int p, int s) {
        while (2*p+1 &amp;lt; s) {
            int c1 = 2*p+1;
            int c2 = 2*p+2;
            int c = (c2&amp;lt;s &amp;amp;&amp;amp; nums[c2]&amp;gt;nums[c1]) ? c2 : c1;
            if (nums[c] &amp;gt; nums[p]) swap(nums[c], nums[p]);
            else break;
            p = c;
        }
    }

    vector&amp;lt;int&amp;gt; heapSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = n/2-1; i &amp;gt;= 0; --i) {
            adjust(nums, i, n);
        }
        for (int i = n-1; i &amp;gt; 0; --i) {
            swap(nums[0], nums[i]);
            adjust(nums, 0, i);
        }
        return nums;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
